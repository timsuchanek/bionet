
/*
 * lycheeJS 0.8
 * 
 * {"platform":["nodejs"]}
 * 
 * game.net.Server
 * game.net.remote.File
 * lychee.data.BitON
 * lychee.data.JSON
 * lychee.event.Emitter
 * lychee.net.Protocol
 * lychee.net.Remote
 * lychee.net.Server
 * lychee.net.Service
 * lychee.net.Tunnel
 */


(function(lychee, global) {

	var environment = lychee.deserialize({"constructor":"lychee.Environment","arguments":[{"id":"biolib/nodejs/server","build":"game.net.Server","debug":false,"sandbox":false,"type":"build","tags":{"platform":["nodejs"]}}],"blob":{"definitions":{"game.net.Server":{"constructor":"lychee.Definition","arguments":["game.net.Server"],"blob":{"requires":["lychee.data.BitON","game.net.remote.File"],"includes":["lychee.net.Server"],"exports":"function (lychee, game, global, attachments) {\n\n  var _BitON = lychee.data.BitON;\n  var _file  = game.net.remote.File;\n\n\n  var Class = function(data) {\n\n    var settings = lychee.extend({\n      codec: _BitON\n    }, data);\n\n\n    lychee.net.Server.call(this, settings);\n\n\n\n    /*\n     * INITIALIZATION\n     */\n\n    this.bind('connect', function(remote) {\n\n      console.log('(BioNET) game.net.Server: Remote connected (' + remote.host + ':' + remote.port + ')');\n\n      remote.addService(new _file(remote));\n\n    }, this);\n\n    this.bind('disconnect', function(remote) {\n\n      console.log('(BioNET) game.net.Server: Remote disconnected (' + remote.host + ':' + remote.port + ')');\n\n    }, this);\n\n\n    this.connect();\n\n  };\n\n\n  Class.prototype = {\n\n  };\n\n\n  return Class;\n\n}"}},"lychee.net.Server":{"constructor":"lychee.Definition","arguments":["lychee.net.Server"],"blob":{"tags":{"platform":"nodejs"},"requires":["lychee.data.BitON","lychee.data.JSON","lychee.net.Remote"],"includes":["lychee.event.Emitter"],"supports":"function (lychee, global) {\n\n\tif (typeof process !== 'undefined') {\n\t\treturn true;\n\t}\n\n\n\treturn false;\n\n}","exports":"function (lychee, global, attachments) {\n\n\tvar http    = require('http');\n\tvar crypto  = require('crypto');\n\n\tvar _BitON  = lychee.data.BitON;\n\tvar _JSON   = lychee.data.JSON;\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tvar _get_websocket_headers = function(httpheaders) {\n\n\t\tvar wsheaders = {\n\t\t\thost:    httpheaders.host,\n\t\t\torigin:  httpheaders.origin || null,\n\t\t\tversion: +httpheaders.version || 0\n\t\t};\n\n\n\t\tfor (var prop in httpheaders) {\n\n\t\t\tif (prop.substr(0, 14) === 'sec-websocket-') {\n\t\t\t\twsheaders[prop.substr(14)] = httpheaders[prop];\n\t\t\t}\n\n\t\t}\n\n\n\t\tif (wsheaders.version) {\n\t\t\treturn wsheaders;\n\t\t}\n\n\n\t\treturn null;\n\n\t};\n\n\tvar _get_websocket_handshake = function(request) {\n\n\t\tvar headers = _get_websocket_headers(request.headers);\n\t\tif (headers !== null && headers.origin !== null) {\n\n\t\t\tvar sha1 = crypto.createHash('sha1');\n\t\t\tsha1.update(headers.key + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11');\n\n\n\t\t\t// HEAD\n\t\t\tvar handshake = '';\n\t\t\thandshake += 'HTTP/1.1 101 WebSocket Protocol Handshake\\r\\n';\n\t\t\thandshake += 'Upgrade: WebSocket\\r\\n';\n\t\t\thandshake += 'Connection: Upgrade\\r\\n';\n\n\t\t\thandshake += 'Sec-WebSocket-Version: ' + headers.version       + '\\r\\n';\n\t\t\thandshake += 'Sec-WebSocket-Origin: '  + headers.origin        + '\\r\\n';\n\t\t\thandshake += 'Sec-WebSocket-Accept: '  + sha1.digest('base64') + '\\r\\n';\n\n\n\t\t\t// BODY\n\t\t\thandshake += '\\r\\n';\n\n\n\t\t\treturn handshake;\n\n\t\t}\n\n\n\t\treturn null;\n\n\t};\n\n\tvar _upgrade_to_websocket = function(request, socket, head) {\n\n\t\tvar reqheaders = request.headers;\n\t\tif (typeof reqheaders.upgrade === 'string' && reqheaders.upgrade.toLowerCase() === 'websocket') {\n\n\t\t\tif (typeof reqheaders.connection === 'string' && reqheaders.connection.toLowerCase().indexOf('upgrade') !== -1) {\n\n\t\t\t\tvar handshake = _get_websocket_handshake(request);\n\t\t\t\tif (handshake !== null) {\n\n\t\t\t\t\tsocket.write(handshake, 'ascii');\n\t\t\t\t\tsocket.setTimeout(0);\n\t\t\t\t\tsocket.setNoDelay(true);\n\t\t\t\t\tsocket.setKeepAlive(true, 0);\n\t\t\t\t\tsocket.removeAllListeners('timeout');\n\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\treturn false;\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tvar Class = function(data) {\n\n\t\tvar settings = lychee.extend({}, data);\n\n\n\t\tthis.host = null;\n\t\tthis.port = 1337;\n\n\n\t\tthis.__codec  = lychee.interfaceof(settings.codec, _JSON) ? settings.codec : _JSON;\n\t\tthis.__socket = null;\n\n\n\t\tthis.setHost(settings.host);\n\t\tthis.setPort(settings.port);\n\n\n\t\tlychee.event.Emitter.call(this);\n\n\t\tsettings = null;\n\n\t};\n\n\n\tClass.prototype = {\n\n\t\t/*\n\t\t * ENTITY API\n\t\t */\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\tvar data = lychee.event.Emitter.prototype.serialize.call(this);\n\t\t\tdata['constructor'] = 'lychee.net.Server';\n\n\t\t\tvar settings = {};\n\n\n\t\t\tif (this.host !== 'localhost') settings.host = this.host;\n\t\t\tif (this.port !== 1337)        settings.port = this.port;\n\n\n\t\t\tdata['arguments'][0] = settings;\n\n\n\t\t\treturn data;\n\n\t\t},\n\n\n\n\t\t/*\n\t\t * CUSTOM API\n\t\t */\n\n\t\tconnect: function() {\n\n\t\t\tif (this.__socket === null) {\n\n\t\t\t\tif (lychee.debug === true) {\n\t\t\t\t\tconsole.log('lychee.net.Server: Connected to ' + this.host + ':' + this.port);\n\t\t\t\t}\n\n\n\t\t\t\tvar that = this;\n\n\n\t\t\t\tthis.__socket = new http.Server();\n\n\t\t\t\tthis.__socket.on('upgrade', function(request, socket, headers) {\n\n\t\t\t\t\tif (_upgrade_to_websocket.call(that, request, socket, headers) === true) {\n\n\t\t\t\t\t\tvar host = socket.remoteAddress || socket.server._connectionKey.split(':')[1];\n\t\t\t\t\t\tvar port = socket.remotePort    || socket.server._connectionKey.split(':')[2];\n\n\n\t\t\t\t\t\tvar remote = new lychee.net.Remote({\n\t\t\t\t\t\t\thost:  host,\n\t\t\t\t\t\t\tport:  port,\n\t\t\t\t\t\t\tcodec: that.__codec\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tremote.bind('connect', function() {\n\t\t\t\t\t\t\tthat.trigger('connect', [ this ]);\n\t\t\t\t\t\t}, remote);\n\n\t\t\t\t\t\tremote.bind('disconnect', function() {\n\t\t\t\t\t\t\tthat.trigger('disconnect', [ this ]);\n\t\t\t\t\t\t}, remote);\n\n\t\t\t\t\t\tremote.connect(socket);\n\t\t\t\t\t\tremote.trigger('connect', []);\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tsocket.end();\n\t\t\t\t\t\tsocket.destroy();\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t\tthis.__socket.on('error', function(err) {\n\n\t\t\t\t\tconsole.error('lychee.net.Server: Error \"' + err + '\" on ' + that.host + ':' + that.port);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthat.__socket.close();\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t\tthis.__socket.on('close', function() {\n\t\t\t\t\tthat.__socket = null;\n\t\t\t\t});\n\n\t\t\t\tthis.__socket.listen(this.port, this.host);\n\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tdisconnect: function() {\n\n\t\t\tif (this.__socket !== null) {\n\t\t\t\tthis.__socket.close();\n\t\t\t}\n\n\n\t\t\treturn true;\n\n\t\t},\n\n\n\n\t\t/*\n\t\t * TUNNEL API\n\t\t */\n\n\t\tsetHost: function(host) {\n\n\t\t\thost = typeof host === 'string' ? host : null;\n\n\n\t\t\tif (host !== null) {\n\n\t\t\t\tthis.host = host;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tsetPort: function(port) {\n\n\t\t\tport = typeof port === 'number' ? (port | 0) : null;\n\n\n\t\t\tif (port !== null) {\n\n\t\t\t\tthis.port = port;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\n\n\treturn Class;\n\n}"}},"lychee.data.BitON":{"constructor":"lychee.Definition","arguments":["lychee.data.BitON"],"blob":{"exports":"function (lychee, global) {\n\n\t/*\n\t * HELPERS\n\t */\n\n\tvar CHAR_TABLE = new Array(256);\n\tfor (var c = 0; c < 256; c++) {\n\t\tCHAR_TABLE[c] = String.fromCharCode(c);\n\t}\n\n\n\tvar MASK_TABLE = new Array(9);\n\tvar POW_TABLE  = new Array(9);\n\tvar RPOW_TABLE = new Array(9);\n\tfor (var m = 0; m < 9; m++) {\n\t\tPOW_TABLE[m]  = Math.pow(2, m) - 1;\n\t\tMASK_TABLE[m] = ~(POW_TABLE[m] ^ 0xff);\n\t\tRPOW_TABLE[m] = Math.pow(10, m);\n\t}\n\n\n\tvar _resolve_constructor = function(identifier, scope) {\n\n\t\tvar pointer = scope;\n\n\t\tvar ns = identifier.split('.');\n\t\tfor (var n = 0, l = ns.length; n < l; n++) {\n\n\t\t\tvar name = ns[n];\n\n\t\t\tif (pointer[name] !== undefined) {\n\t\t\t\tpointer = pointer[name];\n\t\t\t} else {\n\t\t\t\tpointer = null;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\n\n\t\treturn pointer;\n\n\t};\n\n\n\n\tvar _Stream = function(buffer, mode) {\n\n\t\tthis.__buffer    = typeof buffer === 'string' ? buffer : '';\n\t\tthis.__mode      = typeof mode === 'number'   ? mode   : 0;\n\n\t\tthis.__pointer   = 0;\n\t\tthis.__value     = 0;\n\t\tthis.__remaining = 8;\n\t\tthis.__index     = 0;\n\n\t\tif (this.__mode === _Stream.MODE.read) {\n\t\t\tthis.__value = this.__buffer.charCodeAt(this.__index);\n\t\t}\n\n\t};\n\n\n\t_Stream.MODE = {\n\t\tread:  0,\n\t\twrite: 1\n\t};\n\n\n\t_Stream.prototype = {\n\n\t\ttoString: function() {\n\n\t\t\tif (this.__mode === _Stream.MODE.write) {\n\n\t\t\t\tif (this.__value > 0) {\n\t\t\t\t\tthis.__buffer += CHAR_TABLE[this.__value];\n\t\t\t\t\tthis.__value   = 0;\n\t\t\t\t}\n\n\n\t\t\t\t// 0: Boolean or Null or EOS\n\t\t\t\tthis.write(0, 3);\n\t\t\t\t// 00: EOS\n\t\t\t\tthis.write(0, 2);\n\n\t\t\t}\n\n\t\t\treturn this.__buffer;\n\n\t\t},\n\n\t\tpointer: function() {\n\t\t\treturn this.__pointer;\n\t\t},\n\n\t\tlength: function() {\n\t\t\treturn this.__buffer.length * 8;\n\t\t},\n\n\t\tread: function(bits) {\n\n\t\t\tvar overflow = bits - this.__remaining;\n\t\t\tvar captured = this.__remaining < bits ? this.__remaining : bits;\n\t\t\tvar shift    = this.__remaining - captured;\n\n\n\t\t\tvar buffer = (this.__value & MASK_TABLE[this.__remaining]) >> shift;\n\n\n\t\t\tthis.__pointer   += captured;\n\t\t\tthis.__remaining -= captured;\n\n\n\t\t\tif (this.__remaining === 0) {\n\n\t\t\t\tthis.__value      = this.__buffer.charCodeAt(++this.__index);\n\t\t\t\tthis.__remaining  = 8;\n\n\t\t\t\tif (overflow > 0) {\n\t\t\t\t\tbuffer = buffer << overflow | ((this.__value & MASK_TABLE[this.__remaining]) >> (8 - overflow));\n\t\t\t\t\tthis.__remaining -= overflow;\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn buffer;\n\n\t\t},\n\n\t\treadRAW: function(bytes) {\n\n\t\t\tif (this.__remaining !== 8) {\n\n\t\t\t\tthis.__index++;\n\t\t\t\tthis.__value     = 0;\n\t\t\t\tthis.__remaining = 8;\n\n\t\t\t}\n\n\n\t\t\tvar buffer = '';\n\n\t\t\tif (this.__remaining === 8) {\n\n\t\t\t\tbuffer        += this.__buffer.substr(this.__index, bytes);\n\t\t\t\tthis.__index  += bytes;\n\t\t\t\tthis.__value   = this.__buffer.charCodeAt(this.__index);\n\n\t\t\t}\n\n\n\t\t\treturn buffer;\n\n\t\t},\n\n\t\twrite: function(buffer, bits) {\n\n\t\t\tvar overflow = bits - this.__remaining;\n\t\t\tvar captured = this.__remaining < bits ? this.__remaining : bits;\n\t\t\tvar shift    = this.__remaining - captured;\n\n\n\t\t\tif (overflow > 0) {\n\t\t\t\tthis.__value += buffer >> overflow << shift;\n\t\t\t} else {\n\t\t\t\tthis.__value += buffer << shift;\n\t\t\t}\n\n\n\t\t\tthis.__pointer   += captured;\n\t\t\tthis.__remaining -= captured;\n\n\n\t\t\tif (this.__remaining === 0) {\n\n\t\t\t\tthis.__buffer    += CHAR_TABLE[this.__value];\n\t\t\t\tthis.__remaining  = 8;\n\t\t\t\tthis.__value      = 0;\n\n\t\t\t\tif (overflow > 0) {\n\t\t\t\t\tthis.__value     += (buffer & POW_TABLE[overflow]) << (8 - overflow);\n\t\t\t\t\tthis.__remaining -= overflow;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\twriteRAW: function(buffer) {\n\n\t\t\tif (this.__remaining !== 8) {\n\n\t\t\t\tthis.__buffer   += CHAR_TABLE[this.__value];\n\t\t\t\tthis.__value     = 0;\n\t\t\t\tthis.__remaining = 8;\n\n\t\t\t}\n\n\t\t\tif (this.__remaining === 8) {\n\n\t\t\t\tthis.__buffer  += buffer;\n\t\t\t\tthis.__pointer += buffer.length * 8;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\n\n\t/*\n\t * ENCODER and DECODER\n\t */\n\n\tvar _encode = function(stream, data) {\n\n\t\t// 0: Boolean or Null or EOS\n\t\tif (typeof data === 'boolean' || data === null) {\n\n\t\t\tstream.write(0, 3);\n\n\t\t\tif (data === null) {\n\t\t\t\tstream.write(1, 2);\n\t\t\t} else if (data === false) {\n\t\t\t\tstream.write(2, 2);\n\t\t\t} else if (data === true) {\n\t\t\t\tstream.write(3, 2);\n\t\t\t}\n\n\n\t\t// 1: Integer, 2: Float\n\t\t} else if (typeof data === 'number') {\n\n\t\t\tvar type = 1;\n\t\t\tif (data < 268435456 && data !== (data | 0)) {\n\t\t\t\ttype = 2;\n\t\t\t}\n\n\n\t\t\tstream.write(type, 3);\n\n\n\t\t\t// Negative value\n\t\t\tvar sign = 0;\n\t\t\tif (data < 0) {\n\t\t\t\tdata = -data;\n\t\t\t\tsign = 1;\n\t\t\t}\n\n\n\t\t\t// Float only: Calculate the integer value and remember the shift\n\t\t\tvar shift = 0;\n\n\t\t\tif (type === 2) {\n\n\t\t\t\tvar step = 10;\n\t\t\t\tvar m    = data;\n\t\t\t\tvar tmp  = 0;\n\n\n\t\t\t\t// Calculate the exponent and shift\n\t\t\t\tdo {\n\n\t\t\t\t\tm     = data * step;\n\t\t\t\t\tstep *= 10;\n\t\t\t\t\ttmp   = m | 0;\n\t\t\t\t\tshift++;\n\n\t\t\t\t} while (m - tmp > 1 / step && shift < 8);\n\n\n\t\t\t\tstep = tmp / 10;\n\n\t\t\t\t// Recorrect shift if we are > 0.5\n\t\t\t\t// and shift is too high\n\t\t\t\tif (step === (step | 0)) {\n\t\t\t\t\ttmp = step;\n\t\t\t\t\tshift--;\n\t\t\t\t}\n\n\t\t\t\tdata = tmp;\n\n\t\t\t}\n\n\n\n\t\t\tif (data < 2) {\n\n\t\t\t\tstream.write(0, 4);\n\t\t\t\tstream.write(data, 1);\n\n\t\t\t} else if (data < 16) {\n\n\t\t\t\tstream.write(1, 4);\n\t\t\t\tstream.write(data, 4);\n\n\t\t\t} else if (data < 256) {\n\n\t\t\t\tstream.write(2, 4);\n\t\t\t\tstream.write(data, 8);\n\n\t\t\t} else if (data < 4096) {\n\n\t\t\t\tstream.write(3, 4);\n\t\t\t\tstream.write(data >>  8 & 0xff, 4);\n\t\t\t\tstream.write(data       & 0xff, 8);\n\n\t\t\t} else if (data < 65536) {\n\n\t\t\t\tstream.write(4, 4);\n\t\t\t\tstream.write(data >>  8 & 0xff, 8);\n\t\t\t\tstream.write(data       & 0xff, 8);\n\n\t\t\t} else if (data < 1048576) {\n\n\t\t\t\tstream.write(5, 4);\n\t\t\t\tstream.write(data >> 16 & 0xff, 4);\n\t\t\t\tstream.write(data >>  8 & 0xff, 8);\n\t\t\t\tstream.write(data       & 0xff, 8);\n\n\t\t\t} else if (data < 16777216) {\n\n\t\t\t\tstream.write(6, 4);\n\t\t\t\tstream.write(data >> 16 & 0xff, 8);\n\t\t\t\tstream.write(data >>  8 & 0xff, 8);\n\t\t\t\tstream.write(data       & 0xff, 8);\n\n\t\t\t} else if (data < 268435456) {\n\n\t\t\t\tstream.write(7, 4);\n\t\t\t\tstream.write(data >> 24 & 0xff, 8);\n\t\t\t\tstream.write(data >> 16 & 0xff, 8);\n\t\t\t\tstream.write(data >>  8 & 0xff, 8);\n\t\t\t\tstream.write(data       & 0xff, 8);\n\n\t\t\t} else {\n\n\t\t\t\tstream.write(8, 4);\n\n\t\t\t\t_encode(stream, data.toString());\n\n\t\t\t}\n\n\n\n\t\t\tstream.write(sign, 1);\n\n\n\t\t\t// Float only: Remember the shift for precision\n\t\t\tif (type === 2) {\n\t\t\t\tstream.write(shift, 4);\n\t\t\t}\n\n\n\t\t// 3: String\n\t\t} else if (typeof data === 'string') {\n\n\t\t\tstream.write(3, 3);\n\n\n\t\t\tvar l = data.length;\n\n\t\t\t// Write Size Field\n\t\t\tif (l > 65535) {\n\n\t\t\t\tstream.write(31, 5);\n\n\t\t\t\tstream.write(l >> 24 & 0xff, 8);\n\t\t\t\tstream.write(l >> 16 & 0xff, 8);\n\t\t\t\tstream.write(l >>  8 & 0xff, 8);\n\t\t\t\tstream.write(l       & 0xff, 8);\n\n\t\t\t} else if (l > 255) {\n\n\t\t\t\tstream.write(30, 5);\n\n\t\t\t\tstream.write(l >>  8 & 0xff, 8);\n\t\t\t\tstream.write(l       & 0xff, 8);\n\n\t\t\t} else if (l > 28) {\n\n\t\t\t\tstream.write(29, 5);\n\n\t\t\t\tstream.write(l, 8);\n\n\t\t\t} else {\n\n\t\t\t\tstream.write(l, 5);\n\n\t\t\t}\n\n\n\t\t\tstream.writeRAW(data);\n\n\n\t\t// 4: Start of Array\n\t\t} else if (data instanceof Array) {\n\n\t\t\tstream.write(4, 3);\n\n\t\t\tfor (var d = 0, dl = data.length; d < dl; d++) {\n\t\t\t\tstream.write(0, 3);\n\t\t\t\t_encode(stream, data[d]);\n\t\t\t}\n\n\t\t\t// Write EOO marker\n\t\t\tstream.write(7, 3);\n\n\n\t\t// 5: Start of Object\n\t\t} else if (data instanceof Object && typeof data.serialize !== 'function') {\n\n\t\t\tstream.write(5, 3);\n\n\t\t\tfor (var prop in data) {\n\n\t\t\t\tif (data.hasOwnProperty(prop)) {\n\t\t\t\t\tstream.write(0, 3);\n\t\t\t\t\t_encode(stream, prop);\n\t\t\t\t\t_encode(stream, data[prop]);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Write EOO marker\n\t\t\tstream.write(7, 3);\n\n\n\t\t// 6: Custom High-Level Implementation\n\t\t} else if (data instanceof Object && typeof data.serialize === 'function') {\n\n\t\t\tstream.write(6, 3);\n\n\t\t\tvar blob = lychee.serialize(data);\n\n\t\t\t_encode(stream, blob);\n\n\t\t\t// Write EOO marker\n\t\t\tstream.write(7, 3);\n\n\t\t}\n\n\t};\n\n\n\tvar _decode = function(stream) {\n\n\t\tvar value  = undefined;\n\t\tvar tmp    = 0;\n\t\tvar errors = 0;\n\t\tvar check  = 0;\n\n\t\tif (stream.pointer() < stream.length()) {\n\n\t\t\tvar type = stream.read(3);\n\n\n\t\t\t// 0: Boolean or Null (or EOS)\n\t\t\tif (type === 0) {\n\n\t\t\t\ttmp = stream.read(2);\n\n\t\t\t\tif (tmp === 1) {\n\t\t\t\t\tvalue = null;\n\t\t\t\t} else if (tmp === 2) {\n\t\t\t\t\tvalue = false;\n\t\t\t\t} else if (tmp === 3) {\n\t\t\t\t\tvalue = true;\n\t\t\t\t}\n\n\n\t\t\t// 1: Integer, 2: Float\n\t\t\t} else if (type === 1 || type === 2) {\n\n\t\t\t\ttmp = stream.read(4);\n\n\n\t\t\t\tif (tmp === 0) {\n\n\t\t\t\t\tvalue = stream.read(1);\n\n\t\t\t\t} else if (tmp === 1) {\n\n\t\t\t\t\tvalue = stream.read(4);\n\n\t\t\t\t} else if (tmp === 2) {\n\n\t\t\t\t\tvalue = stream.read(8);\n\n\t\t\t\t} else if (tmp === 3) {\n\n\t\t\t\t\tvalue = (stream.read(4) <<  8) + stream.read(8);\n\n\t\t\t\t} else if (tmp === 4) {\n\n\t\t\t\t\tvalue = (stream.read(8) <<  8) + stream.read(8);\n\n\t\t\t\t} else if (tmp === 5) {\n\n\t\t\t\t\tvalue = (stream.read(4) << 16) + (stream.read(8) <<  8) + stream.read(8);\n\n\t\t\t\t} else if (tmp === 6) {\n\n\t\t\t\t\tvalue = (stream.read(8) << 16) + (stream.read(8) <<  8) + stream.read(8);\n\n\t\t\t\t} else if (tmp === 7) {\n\n\t\t\t\t\tvalue = (stream.read(8) << 24) + (stream.read(8) << 16) + (stream.read(8) <<  8) + stream.read(8);\n\n\t\t\t\t} else if (tmp === 8) {\n\n\t\t\t\t\tvar str = _decode(stream);\n\n\t\t\t\t\tvalue = parseInt(str, 10);\n\n\t\t\t\t}\n\n\n\t\t\t\t// Negative value\n\t\t\t\tvar sign = stream.read(1);\n\t\t\t\tif (sign === 1) {\n\t\t\t\t\tvalue = -1 * value;\n\t\t\t\t}\n\n\n\t\t\t\t// Float only: Shift it back by the precision\n\t\t\t\tif (type === 2) {\n\t\t\t\t\tvar shift = stream.read(4);\n\t\t\t\t\tvalue /= RPOW_TABLE[shift];\n\t\t\t\t}\n\n\n\t\t\t// 3: String\n\t\t\t} else if (type === 3) {\n\n\t\t\t\tvar size = stream.read(5);\n\n\t\t\t\tif (size === 31) {\n\n\t\t\t\t\tsize = (stream.read(8) << 24) + (stream.read(8) << 16) + (stream.read(8) <<  8) + stream.read(8);\n\n\t\t\t\t} else if (size === 30) {\n\n\t\t\t\t\tsize = (stream.read(8) <<  8) + stream.read(8);\n\n\t\t\t\t} else if (size === 29) {\n\n\t\t\t\t\tsize = stream.read(8);\n\n\t\t\t\t}\n\n\n\t\t\t\tvalue = stream.readRAW(size);\n\n\n\t\t\t// 4: Array\n\t\t\t} else if (type === 4) {\n\n\t\t\t\tvalue = [];\n\n\n\t\t\t\twhile (errors === 0) {\n\n\t\t\t\t\tcheck = stream.read(3);\n\n\t\t\t\t\tif (check === 0) {\n\t\t\t\t\t\tvalue.push(_decode(stream));\n\t\t\t\t\t} else if (check === 7) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrors++;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t// 5: Object\n\t\t\t} else if (type === 5) {\n\n\t\t\t\tvalue = {};\n\n\n\t\t\t\twhile (errors === 0) {\n\n\t\t\t\t\tcheck = stream.read(3);\n\n\t\t\t\t\tif (check === 0) {\n\t\t\t\t\t\tvalue[_decode(stream)] = _decode(stream);\n\t\t\t\t\t} else if (check === 7) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrors++;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t// 6: Custom High-Level Implementation\n\t\t\t} else if (type === 6) {\n\n\t\t\t\tvar blob = _decode(stream);\n\n\t\t\t\tvalue = lychee.deserialize(blob);\n\t\t\t\tcheck = stream.read(3);\n\n\t\t\t\tif (check !== 7) {\n\t\t\t\t\tvalue = undefined;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\treturn value;\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tvar Module = {};\n\n\n\tModule.encode = function(data) {\n\n\t\tvar stream = new _Stream('', _Stream.MODE.write);\n\n\t\t_encode(stream, data);\n\n\t\treturn stream.toString();\n\n\t};\n\n\n\tModule.decode = function(data) {\n\n\t\tvar stream = new _Stream(data, _Stream.MODE.read);\n\n\t\tvar value = _decode(stream);\n\t\tif (value === undefined) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\n\t};\n\n\n\treturn Module;\n\n}"}},"game.net.remote.File":{"constructor":"lychee.Definition","arguments":["game.net.remote.File"],"blob":{"includes":["lychee.net.Service"],"exports":"function (lychee, game, global, attachments) {\n\n  var Class = function(remote) {\n\n      lychee.net.Service.call(this, 'file', remote, lychee.net.Service.TYPE.remote);\n\n  };\n\n\n  Class.prototype = {\n\n  };\n\n\n  return Class;\n\n}"}},"lychee.event.Emitter":{"constructor":"lychee.Definition","arguments":["lychee.event.Emitter"],"blob":{"exports":"function (lychee, global) {\n\n\t/*\n\t * HELPERS\n\t */\n\n\tvar _bind = function(type, callback, scope, once) {\n\n\t\tif (type === null || callback === null) {\n\t\t\treturn false;\n\t\t}\n\n\n\t\tvar passAction = false;\n\t\tvar passSelf   = false;\n\n\t\tif (type.charAt(0) === '@') {\n\t\t\ttype = type.substr(1, type.length - 1);\n\t\t\tpassAction = true;\n\t\t} else if (type.charAt(0) === '#') {\n\t\t\ttype = type.substr(1, type.length - 1);\n\t\t\tpassSelf = true;\n\t\t}\n\n\n\t\tif (this.___events[type] === undefined) {\n\t\t\tthis.___events[type] = [];\n\t\t}\n\n\n\t\tthis.___events[type].push({\n\t\t\tpassAction: passAction,\n\t\t\tpassSelf:   passSelf,\n\t\t\tcallback:   callback,\n\t\t\tscope:      scope,\n\t\t\tonce:       once\n\t\t});\n\n\n\t\treturn true;\n\n\t};\n\n\tvar _trigger = function(type, data) {\n\n\t\tif (this.___events[type] !== undefined) {\n\n\t\t\tvar value = undefined;\n\n\t\t\tfor (var e = 0; e < this.___events[type].length; e++) {\n\n\t\t\t\tvar args  = [];\n\t\t\t\tvar entry = this.___events[type][e];\n\n\t\t\t\tif (entry.passAction === true) {\n\n\t\t\t\t\targs.push(type);\n\t\t\t\t\targs.push(this);\n\n\t\t\t\t} else if (entry.passSelf === true) {\n\n\t\t\t\t\targs.push(this);\n\n\t\t\t\t}\n\n\n\t\t\t\tif (data !== null) {\n\t\t\t\t\targs.push.apply(args, data);\n\t\t\t\t}\n\n\n\t\t\t\tvar result = entry.callback.apply(entry.scope, args);\n\t\t\t\tif (result !== undefined) {\n\t\t\t\t\tvalue = result;\n\t\t\t\t}\n\n\n\t\t\t\tif (entry.once === true) {\n\n\t\t\t\t\tif (this.unbind(type, entry.callback, entry.scope) === true) {\n\t\t\t\t\t\te--;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tif (value !== undefined) {\n\t\t\t\treturn value;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t}\n\n\n\t\treturn false;\n\n\t};\n\n\tvar _unbind = function(type, callback, scope) {\n\n\t\tvar found = false;\n\n\t\tif (type !== null) {\n\n\t\t\tfound = _unbind_event.call(this, type, callback, scope);\n\n\t\t} else {\n\n\t\t\tfor (type in this.___events) {\n\n\t\t\t\tvar result = _unbind_event.call(this, type, callback, scope);\n\t\t\t\tif (result === true) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\treturn found;\n\n\t};\n\n\tvar _unbind_event = function(type, callback, scope) {\n\n\t\tif (this.___events[type] !== undefined) {\n\n\t\t\tvar found = false;\n\n\t\t\tfor (var e = 0, el = this.___events[type].length; e < el; e++) {\n\n\t\t\t\tvar entry = this.___events[type][e];\n\n\t\t\t\tif ((callback === null || entry.callback === callback) && (scope === null || entry.scope === scope)) {\n\n\t\t\t\t\tfound = true;\n\n\t\t\t\t\tthis.___events[type].splice(e, 1);\n\t\t\t\t\tel--;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn found;\n\n\t\t}\n\n\n\t\treturn false;\n\n\t};\n\n\n\tif (lychee.debug === true) {\n\n\t\tvar _original_bind    = _bind;\n\t\tvar _original_trigger = _trigger;\n\t\tvar _original_unbind  = _unbind;\n\n\n\t\t_bind = function(type, callback, scope, once) {\n\n\t\t\tvar result = _original_bind.call(this, type, callback, scope, once);\n\t\t\tif (result !== false) {\n\n\t\t\t\tthis.___timeline.bind.push({\n\t\t\t\t\ttime:     Date.now(),\n\t\t\t\t\ttype:     type,\n\t\t\t\t\tcallback: lychee.serialize(callback),\n\t\t\t\t\t// scope:    lychee.serialize(scope),\n\t\t\t\t\tonce:     once\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t};\n\n\t\t_trigger = function(type, data) {\n\n\t\t\tvar result = _original_trigger.call(this, type, data);\n\t\t\tif (result !== false) {\n\n\t\t\t\tthis.___timeline.trigger.push({\n\t\t\t\t\ttime: Date.now(),\n\t\t\t\t\ttype: type,\n\t\t\t\t\tdata: lychee.serialize(data)\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t};\n\n\t\t_unbind = function(type, callback, scope) {\n\n\t\t\tvar result = _original_unbind.call(this, type, callback, scope);\n\t\t\tif (result !== false) {\n\n\t\t\t\tthis.___timeline.unbind.push({\n\t\t\t\t\ttime:     Date.now(),\n\t\t\t\t\ttype:     type,\n\t\t\t\t\tcallback: lychee.serialize(callback),\n\t\t\t\t\tscope:    lychee.serialize(scope)\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tvar Class = function() {\n\n\t\tthis.___events   = {};\n\t\tthis.___timeline = {\n\t\t\tbind:    [],\n\t\t\ttrigger: [],\n\t\t\tunbind:  []\n\t\t};\n\n\t};\n\n\n\tClass.prototype = {\n\n\t\t/*\n\t\t * ENTITY API\n\t\t */\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\tvar blob = {};\n\n\n\t\t\tif (this.___timeline.bind.length > 0 || this.___timeline.trigger.length > 0 || this.___timeline.unbind.length > 0) {\n\n\t\t\t\tblob.timeline = {};\n\n\n\t\t\t\tif (this.___timeline.bind.length > 0) {\n\n\t\t\t\t\tblob.timeline.bind = [];\n\n\t\t\t\t\tfor (var b = 0, bl = this.___timeline.bind.length; b < bl; b++) {\n\t\t\t\t\t\tblob.timeline.bind.push(this.___timeline.bind[b]);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif (this.___timeline.trigger.length > 0) {\n\n\t\t\t\t\tblob.timeline.trigger = [];\n\n\t\t\t\t\tfor (var t = 0, tl = this.___timeline.trigger.length; t < tl; t++) {\n\t\t\t\t\t\tblob.timeline.trigger.push(this.___timeline.trigger[t]);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif (this.___timeline.unbind.length > 0) {\n\n\t\t\t\t\tblob.timeline.unbind = [];\n\n\t\t\t\t\tfor (var u = 0, ul = this.___timeline.unbind.length; u < ul; u++) {\n\t\t\t\t\t\tblob.timeline.unbind.push(this.___timeline.unbind[u]);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn {\n\t\t\t\t'constructor': 'lychee.event.Emitter',\n\t\t\t\t'arguments':   [],\n\t\t\t\t'blob':        Object.keys(blob).length > 0 ? blob : null\n\t\t\t};\n\n\t\t},\n\n\n\n\t\t/*\n\t\t * CUSTOM API\n\t\t */\n\n\t\tbind: function(type, callback, scope, once) {\n\n\t\t\ttype     = typeof type === 'string'     ? type     : null;\n\t\t\tcallback = callback instanceof Function ? callback : null;\n\t\t\tscope    = scope !== undefined          ? scope    : this;\n\t\t\tonce     = once === true;\n\n\n\t\t\treturn _bind.call(this, type, callback, scope, once);\n\n\t\t},\n\n\t\ttrigger: function(type, data) {\n\n\t\t\ttype = typeof type === 'string' ? type : null;\n\t\t\tdata = data instanceof Array    ? data : null;\n\n\n\t\t\treturn _trigger.call(this, type, data);\n\n\t\t},\n\n\t\tunbind: function(type, callback, scope) {\n\n\t\t\ttype     = typeof type === 'string'     ? type     : null;\n\t\t\tcallback = callback instanceof Function ? callback : null;\n\t\t\tscope    = scope !== undefined          ? scope    : null;\n\n\n\t\t\treturn _unbind.call(this, type, callback, scope);\n\n\t\t}\n\n\t};\n\n\n\treturn Class;\n\n}"}},"lychee.data.JSON":{"constructor":"lychee.Definition","arguments":["lychee.data.JSON"],"blob":{"exports":"function (lychee, global) {\n\n\t/*\n\t * HELPERS\n\t */\n\n\tvar _Stream = function(buffer, mode) {\n\n\t\tthis.__buffer = typeof buffer === 'string' ? buffer : '';\n\t\tthis.__mode   = typeof mode === 'number'   ? mode   : 0;\n\n\t\tthis.__index  = 0;\n\n\t};\n\n\n\t_Stream.MODE = {\n\t\tread:  0,\n\t\twrite: 1\n\t};\n\n\n\t_Stream.prototype = {\n\n\t\ttoString: function() {\n\t\t\treturn this.__buffer;\n\t\t},\n\n\t\tpointer: function() {\n\t\t\treturn this.__index;\n\t\t},\n\n\t\tlength: function() {\n\t\t\treturn this.__buffer.length;\n\t\t},\n\n\t\tseek: function(array) {\n\n\t\t\tvar bytes = Infinity;\n\n\t\t\tfor (var a = 0, al = array.length; a < al; a++) {\n\n\t\t\t\tvar token = array[a];\n\t\t\t\tvar size  = this.__buffer.indexOf(token, this.__index + 1) - this.__index;\n\t\t\t\tif (size > -1 && size < bytes) {\n\t\t\t\t\tbytes = size;\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tif (bytes === Infinity) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\n\t\t\treturn bytes;\n\n\t\t},\n\n\t\tseekRAW: function(bytes) {\n\t\t\treturn this.__buffer.substr(this.__index, bytes);\n\t\t},\n\n\t\treadRAW: function(bytes) {\n\n\t\t\tvar buffer = '';\n\n\t\t\tbuffer       += this.__buffer.substr(this.__index, bytes);\n\t\t\tthis.__index += bytes;\n\n\t\t\treturn buffer;\n\n\t\t},\n\n\t\twriteRAW: function(buffer) {\n\n\t\t\tthis.__buffer += buffer;\n\t\t\tthis.__index  += buffer.length;\n\n\t\t}\n\n\t};\n\n\n\n\t/*\n\t * ENCODER and DECODER\n\t */\n\n\tvar _encode = function(stream, data) {\n\n\t\t// null,false,true: Boolean or Null or EOS\n\t\tif (typeof data === 'boolean' || data === null) {\n\n\t\t\tif (data === null) {\n\t\t\t\tstream.writeRAW('null');\n\t\t\t} else if (data === false) {\n\t\t\t\tstream.writeRAW('false');\n\t\t\t} else if (data === true) {\n\t\t\t\tstream.writeRAW('true');\n\t\t\t}\n\n\n\t\t// 123,12.3: Integer or Float\n\t\t} else if (typeof data === 'number') {\n\n\t\t\tvar type = 1;\n\t\t\tif (data < 268435456 && data !== (data | 0)) {\n\t\t\t\ttype = 2;\n\t\t\t}\n\n\n\t\t\t// Negative value\n\t\t\tvar sign = 0;\n\t\t\tif (data < 0) {\n\t\t\t\tdata = -data;\n\t\t\t\tsign = 1;\n\t\t\t}\n\n\n\t\t\tif (sign === 1) {\n\t\t\t\tstream.writeRAW('-');\n\t\t\t}\n\n\n\t\t\t// TODO: Find a better way to serialize Numbers\n\t\t\tif (type === 1) {\n\t\t\t\tstream.writeRAW('' + data.toString());\n\t\t\t} else {\n\t\t\t\tstream.writeRAW('' + data.toString());\n\t\t\t}\n\n\n\t\t// \"\": String\n\t\t} else if (typeof data === 'string') {\n\n\t\t\tstream.writeRAW('\"');\n\n\t\t\tstream.writeRAW(data.replace(/\\\\/g, '\\\\\\\\').replace('\"', '\\\\\"'));\n\n\t\t\tstream.writeRAW('\"');\n\n\n\t\t// []: Array\n\t\t} else if (data instanceof Array) {\n\n\t\t\tstream.writeRAW('[');\n\n\t\t\tfor (var d = 0, dl = data.length; d < dl; d++) {\n\n\t\t\t\t_encode(stream, data[d]);\n\n\t\t\t\tif (d < dl - 1) {\n\t\t\t\t\tstream.writeRAW(',');\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstream.writeRAW(']');\n\n\n\t\t// {}: Object\n\t\t} else if (data instanceof Object && typeof data.serialize !== 'function') {\n\n\t\t\tstream.writeRAW('{');\n\n\t\t\tvar keys = Object.keys(data);\n\n\t\t\tfor (var k = 0, kl = keys.length; k < kl; k++) {\n\n\t\t\t\tvar key = keys[k];\n\n\t\t\t\t_encode(stream, key);\n\t\t\t\tstream.writeRAW(':');\n\n\t\t\t\t_encode(stream, data[key]);\n\n\t\t\t\tif (k < kl - 1) {\n\t\t\t\t\tstream.writeRAW(',');\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstream.writeRAW('}');\n\n\n\t\t// Custom High-Level Implementation\n\t\t} else if (data instanceof Object && typeof data.serialize === 'function') {\n\n\t\t\tstream.writeRAW('%');\n\n\t\t\tvar blob = lychee.serialize(data);\n\n\t\t\t_encode(stream, blob);\n\n\t\t\tstream.writeRAW('%');\n\n\t\t}\n\n\t};\n\n\n\tvar _decode = function(stream) {\n\n\t\tvar value  = undefined;\n\t\tvar size   = 0;\n\t\tvar tmp    = 0;\n\t\tvar errors = 0;\n\t\tvar check  = null;\n\n\n\t\tif (stream.pointer() < stream.length()) {\n\n\t\t\tvar seek = stream.seekRAW(1);\n\n\n\t\t\t// null,false,true: Boolean or Null or EOS\n\t\t\tif (seek === 'n' || seek === 'f' || seek === 't') {\n\n\t\t\t\tif (stream.seekRAW(4) === 'null') {\n\t\t\t\t\tstream.readRAW(4);\n\t\t\t\t\tvalue = null;\n\t\t\t\t} else if (stream.seekRAW(5) === 'false') {\n\t\t\t\t\tstream.readRAW(5);\n\t\t\t\t\tvalue = false;\n\t\t\t\t} else if (stream.seekRAW(4) === 'true') {\n\t\t\t\t\tstream.readRAW(4);\n\t\t\t\t\tvalue = true;\n\t\t\t\t}\n\n\t\t\t} else if (!isNaN(parseInt(seek, 10))) {\n\n\t\t\t\tsize = stream.seek([ ',', ']', '}' ]);\n\n\t\t\t\tif (size > 0) {\n\n\t\t\t\t\ttmp = stream.readRAW(size);\n\n\t\t\t\t\tif (tmp.indexOf('.') !== -1) {\n\t\t\t\t\t\tvalue = parseFloat(tmp, 10);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue = parseInt(tmp, 10);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t// \"\": String\n\t\t\t} else if (seek === '\"') {\n\n\t\t\t\tstream.readRAW(1);\n\n\t\t\t\tsize = stream.seek([ '\\\\', '\"' ]);\n\n\t\t\t\tif (size > 0) {\n\t\t\t\t\tvalue = stream.readRAW(size);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = '';\n\t\t\t\t}\n\n\t\t\t\tcheck = stream.readRAW(1);\n\n\n\t\t\t\twhile (check === '\\\\') {\n\n\t\t\t\t\tvalue[value.length - 1] = check;\n\n\t\t\t\t\tsize   = stream.seek([ '\\\\', '\"' ]);\n\t\t\t\t\tvalue += stream.readRAW(size);\n\t\t\t\t\tcheck  = stream.readRAW(1);\n\n\t\t\t\t}\n\n\n\t\t\t// []: Array\n\t\t\t} else if (seek === '[') {\n\n\t\t\t\tvalue = [];\n\n\n\t\t\t\tstream.readRAW(1);\n\n\t\t\t\twhile (errors === 0) {\n\n\t\t\t\t\tvalue.push(_decode(stream));\n\n\t\t\t\t\tcheck = stream.seekRAW(1);\n\n\t\t\t\t\tif (check === ',') {\n\t\t\t\t\t\tstream.readRAW(1);\n\t\t\t\t\t} else if (check === ']') {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrors++;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstream.readRAW(1);\n\n\n\t\t\t// {}: Object\n\t\t\t} else if (seek === '{') {\n\n\t\t\t\tvalue = {};\n\n\n\t\t\t\tstream.readRAW(1);\n\n\t\t\t\twhile (errors === 0) {\n\n\t\t\t\t\tvar object_key = _decode(stream);\n\t\t\t\t\tstream.readRAW(1);\n\n\t\t\t\t\tvar object_value = _decode(stream);\n\t\t\t\t\tcheck = stream.seekRAW(1);\n\n\t\t\t\t\tvalue[object_key] = object_value;\n\n\t\t\t\t\tif (check === ',') {\n\t\t\t\t\t\tstream.readRAW(1);\n\t\t\t\t\t} else if (check === '}') {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrors++;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstream.readRAW(1);\n\n\t\t\t// %%: Custom High-Level Implementation\n\t\t\t} else if (seek === '%') {\n\n\t\t\t\tstream.readRAW(1);\n\n\t\t\t\tvar blob = _decode(stream);\n\n\t\t\t\tvalue = lychee.deserialize(blob);\n\t\t\t\tcheck = stream.readRAW(1);\n\n\t\t\t\tif (check !== '%') {\n\t\t\t\t\tvalue = undefined;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\treturn value;\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tvar Module = {};\n\n\n\tModule.encode = function(data) {\n\n\t\tvar stream = new _Stream('', _Stream.MODE.write);\n\n\t\t_encode(stream, data);\n\n\t\treturn stream.toString();\n\n\t};\n\n\n\tModule.decode = function(data) {\n\n\t\tvar stream = new _Stream(data, _Stream.MODE.read);\n\n\t\tvar value = _decode(stream);\n\t\tif (value === undefined) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\n\t};\n\n\n\treturn Module;\n\n}"}},"lychee.net.Remote":{"constructor":"lychee.Definition","arguments":["lychee.net.Remote"],"blob":{"tags":{"platform":"nodejs"},"requires":["lychee.data.BitON","lychee.data.JSON","lychee.net.Protocol"],"includes":["lychee.net.Tunnel"],"supports":"function (lychee, global) {\n\n\tif (typeof process !== 'undefined') {\n\t\treturn true;\n\t}\n\n\n\treturn false;\n\n}","exports":"function (lychee, global, attachments) {\n\n\tvar _BitON = lychee.data.BitON;\n\tvar _JSON  = lychee.data.JSON;\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tvar Class = function(data) {\n\n\t\tvar settings = lychee.extend({}, data);\n\n\n\t\tthis.__socket      = null;\n\t\tthis.__isConnected = false;\n\n\n\t\tlychee.net.Tunnel.call(this, settings);\n\n\t\tsettings = null;\n\n\n\n\t\t/*\n\t\t * INITIALIZATION\n\t\t */\n\n\t\tthis.bind('connect', function() {\n\t\t\tthis.__isConnected = true;\n\t\t}, this);\n\n\t\tthis.bind('disconnect', function() {\n\t\t\tthis.__isConnected = false;\n\t\t}, this);\n\n\t\tthis.bind('send', function(blob) {\n\n\t\t\tif (this.__socket !== null) {\n\t\t\t\tthis.__socket.send(blob);\n\t\t\t}\n\n\t\t}, this);\n\n\t};\n\n\n\tClass.prototype = {\n\n\t\t/*\n\t\t * ENTITY API\n\t\t */\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\tvar data = lychee.net.Tunnel.prototype.serialize.call(this);\n\t\t\tdata['constructor'] = 'lychee.net.Remote';\n\n\n\t\t\treturn data;\n\n\t\t},\n\n\n\n\t\t/*\n\t\t * CUSTOM API\n\t\t */\n\n\t\tconnect: function(socket) {\n\n\t\t\tif (this.__isConnected === false) {\n\n\t\t\t\tvar that = this;\n\n\n\t\t\t\tthis.__socket = new lychee.net.Protocol(socket);\n\n\t\t\t\tthis.__socket.ondata = function(blob) {\n\t\t\t\t\tthat.receive(blob);\n\t\t\t\t};\n\n\t\t\t\tthis.__socket.onclose = function() {\n\t\t\t\t\tthat.__socket = null;\n\t\t\t\t\tthat.trigger('disconnect', []);\n\t\t\t\t};\n\n\n\t\t\t\tif (lychee.debug === true) {\n\t\t\t\t\tconsole.log('lychee.net.Remote: Connected to ' + this.host + ':' + this.port);\n\t\t\t\t}\n\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tdisconnect: function() {\n\n\t\t\tif (this.__isConnected === true) {\n\n\t\t\t\tif (this.__socket !== null) {\n\t\t\t\t\tthis.__socket.close();\n\t\t\t\t}\n\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\n\n\treturn Class;\n\n}"}},"lychee.net.Service":{"constructor":"lychee.Definition","arguments":["lychee.net.Service"],"blob":{"includes":["lychee.event.Emitter"],"exports":"function (lychee, global, attachments) {\n\n\t/*\n\t * HELPERS\n\t */\n\n\tvar _services = {};\n\n\tvar _plug_broadcast = function() {\n\n\t\tvar id = this.id;\n\t\tif (id !== null) {\n\n\t\t\tvar cache = _services[id] || null;\n\t\t\tif (cache === null) {\n\t\t\t\tcache = _services[id] = [];\n\t\t\t}\n\n\n\t\t\tvar found = false;\n\n\t\t\tfor (var c = 0, cl = cache.length; c < cl; c++) {\n\n\t\t\t\tif (cache[c] === this) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tif (found === false) {\n\t\t\t\tcache.push(this);\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tvar _unplug_broadcast = function() {\n\n\t\tthis.setMulticast([]);\n\n\n\t\tvar id = this.id;\n\t\tif (id !== null) {\n\n\t\t\tvar cache = _services[id] || null;\n\t\t\tif (cache !== null) {\n\n\t\t\t\tfor (var c = 0, cl = cache.length; c < cl; c++) {\n\n\t\t\t\t\tif (cache[c] === this) {\n\t\t\t\t\t\tcache.splice(c, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tvar Class = function(id, tunnel, type) {\n\n\t\tid     = typeof id === 'string'                        ? id     : null;\n\t\ttunnel = lychee.interfaceof(lychee.net.Tunnel, tunnel) ? tunnel : null;\n\t\ttype   = lychee.enumof(Class.TYPE, type)               ? type   : null;\n\n\n\t\tthis.id     = id;\n\t\tthis.tunnel = tunnel;\n\t\tthis.type   = type;\n\n\t\tthis.__multicast = [];\n\n\n\t\tif (lychee.debug === true) {\n\n\t\t\tif (this.id === null) {\n\t\t\t\tconsole.error('lychee.net.Service: Invalid (string) id. It has to be kept in sync with the lychee.net.Client and lychee.net.Remote instance.');\n\t\t\t}\n\n\t\t\tif (this.tunnel === null) {\n\t\t\t\tconsole.error('lychee.net.Service: Invalid (lychee.net.Tunnel) tunnel.');\n\t\t\t}\n\n\t\t\tif (this.type === null) {\n\t\t\t\tconsole.error('lychee.net.Service: Invalid (lychee.net.Service.TYPE) type.');\n\t\t\t}\n\n\t\t}\n\n\n\t\tlychee.event.Emitter.call(this);\n\n\n\n\t\t/*\n\t\t * INITIALIZATION\n\t\t */\n\n\t\tif (this.type === Class.TYPE.remote) {\n\n\t\t\tthis.bind('plug',   _plug_broadcast,   this);\n\t\t\tthis.bind('unplug', _unplug_broadcast, this);\n\n\t\t}\n\n\t};\n\n\n\tClass.TYPE = {\n\t\t// 'default': 0, (deactivated)\n\t\t'client': 1,\n\t\t'remote': 2\n\t};\n\n\n\tClass.prototype = {\n\n\t\t/*\n\t\t * ENTITY API\n\t\t */\n\n\t\tdeserialize: function(blob) {\n\n\t\t\tif (blob.tunnel instanceof Object) {\n\t\t\t\tthis.tunnel = lychee.deserialize(blob.tunnel);\n\t\t\t}\n\n\t\t},\n\n\t\tserialize: function() {\n\n\t\t\tvar data = lychee.event.Emitter.prototype.serialize.call(this);\n\t\t\tdata['constructor'] = 'lychee.net.Service';\n\n\t\t\tvar id     = null;\n\t\t\tvar tunnel = null;\n\t\t\tvar type   = null;\n\t\t\tvar blob   = data['blob'] || {};\n\n\n\t\t\tif (this.id !== null)     id = this.id;\n\t\t\tif (this.tunnel !== null) blob.tunnel = lychee.serialize(this.tunnel);\n\t\t\tif (this.type !== null)   type = this.type;\n\n\n\t\t\tdata['arguments'][0] = id;\n\t\t\tdata['arguments'][1] = null;\n\t\t\tdata['arguments'][2] = type;\n\t\t\tdata['blob']         = Object.keys(blob).length > 0 ? blob : null;\n\n\n\t\t\treturn data;\n\n\t\t},\n\n\n\n\t\t/*\n\t\t * SERVICE API\n\t\t */\n\n\t\tmulticast: function(data, service) {\n\n\t\t\tdata    = data instanceof Object    ? data    : null;\n\t\t\tservice = service instanceof Object ? service : null;\n\n\n\t\t\tif (data === null) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\n\t\t\tvar type = this.type;\n\t\t\tif (type === Class.TYPE.client) {\n\n\t\t\t\tif (service === null) {\n\n\t\t\t\t\tservice = {\n\t\t\t\t\t\tid:    this.id,\n\t\t\t\t\t\tevent: 'multicast'\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\n\t\t\t\tif (this.tunnel !== null) {\n\n\t\t\t\t\tthis.tunnel.send({\n\t\t\t\t\t\tdata:    data,\n\t\t\t\t\t\tservice: service\n\t\t\t\t\t}, {\n\t\t\t\t\t\tid:     this.id,\n\t\t\t\t\t\tmethod: 'multicast'\n\t\t\t\t\t});\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t} else if (type === Class.TYPE.remote) {\n\n\t\t\t\tif (data.service !== null) {\n\n\t\t\t\t\tfor (var m = 0, ml = this.__multicast.length; m < ml; m++) {\n\n\t\t\t\t\t\tvar tunnel = this.__multicast[m];\n\t\t\t\t\t\tif (tunnel !== this.tunnel) {\n\n\t\t\t\t\t\t\tdata.data.tid = this.tunnel.host + ':' + this.tunnel.port;\n\n\t\t\t\t\t\t\ttunnel.send(\n\t\t\t\t\t\t\t\tdata.data,\n\t\t\t\t\t\t\t\tdata.service\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tbroadcast: function(data, service) {\n\n\t\t\tdata    = data instanceof Object    ? data    : null;\n\t\t\tservice = service instanceof Object ? service : null;\n\n\n\t\t\tif (data === null || this.id === null) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\n\t\t\tvar type = this.type;\n\t\t\tif (type === Class.TYPE.client) {\n\n\t\t\t\tif (service === null) {\n\n\t\t\t\t\tservice = {\n\t\t\t\t\t\tid:    this.id,\n\t\t\t\t\t\tevent: 'broadcast'\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\n\t\t\t\tif (this.tunnel !== null) {\n\n\t\t\t\t\tthis.tunnel.send({\n\t\t\t\t\t\tdata:    data,\n\t\t\t\t\t\tservice: service\n\t\t\t\t\t}, {\n\t\t\t\t\t\tid:     this.id,\n\t\t\t\t\t\tmethod: 'broadcast'\n\t\t\t\t\t});\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t} else if (type === Class.TYPE.remote) {\n\n\t\t\t\tif (data.service !== null) {\n\n\t\t\t\t\tvar broadcast = _services[this.id] || null;\n\t\t\t\t\tif (broadcast !== null) {\n\n\t\t\t\t\t\tfor (var b = 0, bl = broadcast.length; b < bl; b++) {\n\n\t\t\t\t\t\t\tvar tunnel = broadcast[b].tunnel;\n\t\t\t\t\t\t\tif (tunnel !== this.tunnel) {\n\n\t\t\t\t\t\t\t\tdata.data.tid = this.tunnel.host + ':' + this.tunnel.port;\n\n\t\t\t\t\t\t\t\ttunnel.send(\n\t\t\t\t\t\t\t\t\tdata.data,\n\t\t\t\t\t\t\t\t\tdata.service\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\treport: function(message, blob) {\n\n\t\t\tmessage = typeof message === 'string' ? message : null;\n\t\t\tblob    = blob instanceof Object      ? blob    : null;\n\n\n\t\t\tif (message !== null) {\n\n\t\t\t\tif (this.tunnel !== null) {\n\n\t\t\t\t\tthis.tunnel.send({\n\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t\tblob:    blob\n\t\t\t\t\t}, {\n\t\t\t\t\t\tid:    this.id,\n\t\t\t\t\t\tevent: 'error'\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetMulticast: function(multicast) {\n\n\t\t\tif (multicast instanceof Array) {\n\n\t\t\t\tvar valid = true;\n\t\t\t\tvar type  = this.type;\n\n\t\t\t\tfor (var m = 0, ml = multicast.length; m < ml; m++) {\n\n\t\t\t\t\tif (lychee.interfaceof(lychee.net.Tunnel, multicast[m]) === false) {\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.__multicast = multicast;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\n\n\treturn Class;\n\n}"}},"lychee.net.Tunnel":{"constructor":"lychee.Definition","arguments":["lychee.net.Tunnel"],"blob":{"requires":["lychee.data.BitON","lychee.data.JSON","lychee.net.Service"],"includes":["lychee.event.Emitter"],"exports":"function (lychee, global, attachments) {\n\n\tvar _BitON = lychee.data.BitON;\n\tvar _JSON  = lychee.data.JSON;\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tvar _plug_service = function(id, service) {\n\n\t\tid = typeof id === 'string' ? id : null;\n\n\t\tif (id === null || service === null) {\n\t\t\treturn;\n\t\t}\n\n\n\t\tvar found = false;\n\n\t\tfor (var w = 0, wl = this.__services.waiting.length; w < wl; w++) {\n\n\t\t\tif (this.__services.waiting[w] === service) {\n\t\t\t\tthis.__services.waiting.splice(w, 1);\n\t\t\t\tfound = true;\n\t\t\t\twl--;\n\t\t\t\tw--;\n\t\t\t}\n\n\t\t}\n\n\n\t\tif (found === true) {\n\n\t\t\tthis.__services.active.push(service);\n\n\t\t\tservice.trigger('plug', []);\n\n\t\t\tif (lychee.debug === true) {\n\t\t\t\tconsole.log('lychee.net.Tunnel: Remote plugged in Service (' + id + ')');\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tvar _unplug_service = function(id, service) {\n\n\t\tid = typeof id === 'string' ? id : null;\n\n\t\tif (id === null || service === null) {\n\t\t\treturn;\n\t\t}\n\n\n\t\tvar found = false;\n\n\t\tfor (var w = 0, wl = this.__services.waiting.length; w < wl; w++) {\n\n\t\t\tif (this.__services.waiting[w] === service) {\n\t\t\t\tthis.__services.waiting.splice(w, 1);\n\t\t\t\tfound = true;\n\t\t\t\twl--;\n\t\t\t\tw--;\n\t\t\t}\n\n\t\t}\n\n\t\tfor (var a = 0, al = this.__services.active.length; a < al; a++) {\n\n\t\t\tif (this.__services.active[a] === service) {\n\t\t\t\tthis.__services.active.splice(a, 1);\n\t\t\t\tfound = true;\n\t\t\t\tal--;\n\t\t\t\ta--;\n\t\t\t}\n\n\t\t}\n\n\n\t\tif (found === true) {\n\n\t\t\tservice.trigger('unplug', []);\n\n\t\t\tif (lychee.debug === true) {\n\t\t\t\tconsole.log('lychee.net.Tunnel: Remote unplugged Service (' + id + ')');\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tvar Class = function(data) {\n\n\t\tvar settings = lychee.extend({}, data);\n\n\n\t\tthis.port        = 1337;\n\t\tthis.host        = 'localhost';\n\t\tthis.binary      = false;\n\t\tthis.reconnect   = 0;\n\n\n\t\tthis.__codec     = lychee.interfaceof(_JSON, settings.codec) ? settings.codec : _JSON;\n\t\tthis.__services  = {\n\t\t\twaiting: [],\n\t\t\tactive:  []\n\t\t};\n\n\n\t\tthis.setHost(settings.host);\n\t\tthis.setPort(settings.port);\n\t\tthis.setBinary(settings.binary);\n\t\tthis.setReconnect(settings.reconnect);\n\n\n\t\tlychee.event.Emitter.call(this);\n\n\t\tsettings = null;\n\n\n\n\t\t/*\n\t\t * INITIALIZATION\n\t\t */\n\n\t\tthis.bind('disconnect', function() {\n\n\t\t\tfor (var a = 0, al = this.__services.active.length; a < al; a++) {\n\t\t\t\tthis.__services.active[a].trigger('unplug', []);\n\t\t\t}\n\n\t\t\tthis.__services.active  = [];\n\t\t\tthis.__services.waiting = [];\n\n\n\t\t\tif (this.reconnect > 0) {\n\n\t\t\t\tvar that = this;\n\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tthat.trigger('connect', []);\n\t\t\t\t}, this.reconnect);\n\n\t\t\t}\n\n\t\t}, this);\n\n\t};\n\n\n\tClass.STATUS = {\n\t\t1000: 'Normal Closure',\n\t\t1001: 'Going Away',\n\t\t1002: 'Protocol Error',\n\t\t1003: 'Unsupported Data',\n\t\t1005: 'No Status Received',\n\t\t1006: 'Abnormal Closure',\n\t\t1008: 'Policy Violation',\n\t\t1009: 'Message Too Big',\n\t\t1011: 'Internal Error',\n\t\t1012: 'Service Restart',\n\t\t1013: 'Try Again Later'\n\t};\n\n\n\tClass.prototype = {\n\n\t\t/*\n\t\t * ENTITY API\n\t\t */\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\tvar data = lychee.event.Emitter.prototype.serialize.call(this);\n\t\t\tdata['constructor'] = 'lychee.net.Tunnel';\n\n\t\t\tvar settings = {};\n\n\n\t\t\tif (this.binary !== false) settings.binary    = this.binary;\n\t\t\tif (this.reconnect !== 0)  settings.reconnect = this.reconnect;\n\n\n\t\t\t// TODO: Serialize services to data['blob']\n\n\n\t\t\tdata['arguments'][0] = settings;\n\n\n\t\t\treturn data;\n\n\t\t},\n\n\n\n\t\t/*\n\t\t * CUSTOM API\n\t\t */\n\n\t\tsend: function(data, service) {\n\n\t\t\tdata    = data instanceof Object    ? data    : null;\n\t\t\tservice = service instanceof Object ? service : null;\n\n\n\t\t\tif (data === null) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\n\t\t\tif (service !== null) {\n\n\t\t\t\tif (typeof service.id     === 'string') data._serviceId     = service.id;\n\t\t\t\tif (typeof service.event  === 'string') data._serviceEvent  = service.event;\n\t\t\t\tif (typeof service.method === 'string') data._serviceMethod = service.method;\n\n\t\t\t}\n\n\n\t\t\tvar blob = this.__codec.encode(data);\n\t\t\tif (blob !== null) {\n\n\t\t\t\tif (this.binary === true) {\n\n\t\t\t\t\tvar bl    = blob.length;\n\t\t\t\t\tvar bytes = new Uint8Array(bl);\n\n\t\t\t\t\tfor (var b = 0; b < bl; b++) {\n\t\t\t\t\t\tbytes[b] = blob.charCodeAt(b);\n\t\t\t\t\t}\n\n\t\t\t\t\tblob = bytes.buffer;\n\n\t\t\t\t}\n\n\n\t\t\t\tthis.trigger('send', [ blob ]);\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\treceive: function(blob) {\n\n\t\t\tif (this.binary === true) {\n\n\t\t\t\tvar bytes = new Uint8Array(blob);\n\t\t\t\tblob = String.fromCharCode.apply(null, bytes);\n\n\t\t\t}\n\n\n\t\t\tvar data = this.__codec.decode(blob);\n\t\t\tif (data instanceof Object && typeof data._serviceId === 'string') {\n\n\t\t\t\tvar service = this.getService(data._serviceId);\n\t\t\t\tvar event   = data._serviceEvent  || null;\n\t\t\t\tvar method  = data._serviceMethod || null;\n\n\n\t\t\t\tif (method !== null) {\n\n\t\t\t\t\tif (method.charAt(0) === '@') {\n\n\t\t\t\t\t\tif (method === '@plug') {\n\t\t\t\t\t\t\t_plug_service.call(this,   data._serviceId, service);\n\t\t\t\t\t\t} else if (method === '@unplug') {\n\t\t\t\t\t\t\t_unplug_service.call(this, data._serviceId, service);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if (service !== null && typeof service[method] === 'function') {\n\n\t\t\t\t\t\t// Remove data frame service header\n\t\t\t\t\t\tdelete data._serviceId;\n\t\t\t\t\t\tdelete data._serviceMethod;\n\n\t\t\t\t\t\tservice[method](data);\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if (event !== null) {\n\n\t\t\t\t\tif (service !== null && typeof service.trigger === 'function') {\n\n\t\t\t\t\t\t// Remove data frame service header\n\t\t\t\t\t\tdelete data._serviceId;\n\t\t\t\t\t\tdelete data._serviceEvent;\n\n\t\t\t\t\t\tservice.trigger(event, [ data ]);\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.trigger('receive', [ data ]);\n\n\t\t\t}\n\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tsetBinary: function(binary) {\n\n\t\t\tif (binary === true || binary === false) {\n\n\t\t\t\tthis.binary = binary;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tsetHost: function(host) {\n\n\t\t\thost = typeof host === 'string' ? host : null;\n\n\n\t\t\tif (host !== null) {\n\n\t\t\t\tthis.host = host;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tsetPort: function(port) {\n\n\t\t\tport = typeof port === 'number' ? (port | 0) : null;\n\n\n\t\t\tif (port !== null) {\n\n\t\t\t\tthis.port = port;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tsetReconnect: function(reconnect) {\n\n\t\t\treconnect = typeof reconnect === 'number' ? (reconnect | 0) : null;\n\n\n\t\t\tif (reconnect !== null) {\n\n\t\t\t\tthis.reconnect = reconnect;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\taddService: function(service) {\n\n\t\t\tservice = lychee.interfaceof(lychee.net.Service, service) ? service : null;\n\n\n\t\t\tif (service !== null) {\n\n\t\t\t\tvar found = false;\n\n\t\t\t\tfor (var w = 0, wl = this.__services.waiting.length; w < wl; w++) {\n\n\t\t\t\t\tif (this.__services.waiting[w] === service) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor (var a = 0, al = this.__services.active.length; a < al; a++) {\n\n\t\t\t\t\tif (this.__services.active[a] === service) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tif (found === false) {\n\n\t\t\t\t\tthis.__services.waiting.push(service);\n\n\t\t\t\t\tthis.send({}, {\n\t\t\t\t\t\tid:     service.id,\n\t\t\t\t\t\tmethod: '@plug'\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tgetService: function(id) {\n\n\t\t\tid = typeof id === 'string' ? id : null;\n\n\n\t\t\tif (id !== null) {\n\n\t\t\t\tfor (var w = 0, wl = this.__services.waiting.length; w < wl; w++) {\n\n\t\t\t\t\tvar wservice = this.__services.waiting[w];\n\t\t\t\t\tif (wservice.id === id) {\n\t\t\t\t\t\treturn wservice;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor (var a = 0, al = this.__services.active.length; a < al; a++) {\n\n\t\t\t\t\tvar aservice = this.__services.active[a];\n\t\t\t\t\tif (aservice.id === id) {\n\t\t\t\t\t\treturn aservice;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tremoveService: function(service) {\n\n\t\t\tservice = lychee.interfaceof(lychee.net.Service, service) ? service : null;\n\n\n\t\t\tif (service !== null) {\n\n\t\t\t\tvar found = false;\n\n\t\t\t\tfor (var w = 0, wl = this.__services.waiting.length; w < wl; w++) {\n\n\t\t\t\t\tif (this.__services.waiting[w] === service) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor (var a = 0, al = this.__services.active.length; a < al; a++) {\n\n\t\t\t\t\tif (this.__services.active[a] === service) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tif (found === true) {\n\n\t\t\t\t\tthis.send({}, {\n\t\t\t\t\t\tid:     service.id,\n\t\t\t\t\t\tmethod: '@unplug'\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\n\n\treturn Class;\n\n}"}},"lychee.net.Protocol":{"constructor":"lychee.Definition","arguments":["lychee.net.Protocol"],"blob":{"supports":"function (lychee, global) {\n\n\tif (typeof Buffer !== 'undefined' && typeof Buffer.byteLength === 'function') {\n\n\t\tvar buffer = new Buffer(8);\n\t\tif (typeof buffer.copy === 'function' && typeof buffer.length === 'number' && typeof buffer.toString === 'function') {\n\t\t\treturn true;\n\t\t}\n\n\t}\n\n\n\treturn false;\n\n}","exports":"function (lychee, global) {\n\n\t/*\n\t * HELPERS\n\t */\n\n\tvar _read_buffer = function(data) {\n\n\t\tif (data.length > Class.FRAMESIZE) {\n\t\t\treturn this.close(Class.STATUS.message_too_big);\n\t\t}\n\n\n\t\tif (this.__isClosed === false) {\n\n\t\t\tvar tmp = new Buffer(this.__buffer.length + data.length);\n\n\t\t\tthis.__buffer.copy(tmp);\n\t\t\tdata.copy(tmp, this.__buffer.length);\n\n\t\t\tthis.__buffer = tmp;\n\n\n\t\t\tvar length = this.__buffer.length;\n\t\t\twhile (length > 0) {\n\n\t\t\t\t// Invalid Message Frame\n\t\t\t\tvar result = _parse_buffer.call(this, length);\n\t\t\t\tif (result === -1 || this.__isClosed === true) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Header Frames, continue parsing modes\n\t\t\t\t} else if (result === 0) {\n\n\n\t\t\t\t// Valid Message Frame, resize Buffer afterwards\n\t\t\t\t} else if (result === 1) {\n\n\t\t\t\t\tlength = this.__buffer.length - this.__offset;\n\n\t\t\t\t\ttmp = new Buffer(length);\n\t\t\t\t\tthis.__buffer.copy(tmp, 0, this.__offset);\n\t\t\t\t\tthis.__buffer = tmp;\n\t\t\t\t\tthis.__offset = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\n\tvar _parse_buffer = function(length) {\n\n\t\tvar bytes  = length - this.__offset;\n\t\tvar buffer = this.__buffer;\n\n\n\t\tvar data;\n\n\t\tif (this.__mode === 0 && bytes >= 1) {\n\n\t\t\tdata       = buffer[this.__offset++];\n\t\t\tthis.__op  = data & 15;\n\t\t\tdata      &= 240;\n\n\n\t\t\t// 0: Continuation Frame\n\t\t\tif ((data & 2) === 2 || (data & 4) === 4 || (data & 8) === 8) {\n\n\t\t\t\tthis.__mode = -1;\n\n\t\t\t// 1: Text Frame\n\t\t\t} else if (this.__op === 1) {\n\n\t\t\t\tthis.__mode = 1;\n\n\t\t\t// 2: Binary Frame\n\t\t\t} else if (this.__op === 2) {\n\n\t\t\t\tthis.__mode = 1;\n\n\t\t\t// 8: Connection Close Frame\n\t\t\t} else if (this.__op === 8) {\n\n\t\t\t\tthis.__mode = -1;\n\n\n\t\t\t// 9: Ping Frame\n\t\t\t} else if (this.__op === 9) {\n\n\t\t\t\tthis.__mode = 1;\n\n\n\t\t\t// 10: Pong Frame\n\t\t\t} else if (this.__op === 10) {\n\n\t\t\t\tthis.__mode = 1;\n\n\n\t\t\t// 3-7, 11-15: Unassigned OP Codes\n\t\t\t} else {\n\n\t\t\t\tthis.__mode = -1;\n\n\t\t\t}\n\n\t\t} else if (this.__mode === 1 && bytes >= 1) {\n\n\t\t\tdata = buffer[this.__offset++];\n\n\t\t\tthis.__isMasked    = this.__op !== 10 ? true : false;\n\t\t\t// this.__isMasked    = this.__op !== 10 ? (data & 1) === 1 : false;\n\t\t\tthis.__frameLength = data & 127;\n\n\n\t\t\tif (this.__frameLength <= 125) {\n\n\t\t\t\tthis.__mode = this.__isMasked === true ? 4 : 5;\n\n\t\t\t} else if (this.__frameLength === 126) {\n\n\t\t\t\tthis.__frameLength = 0;\n\t\t\t\tthis.__mode        = 2;\n\n\t\t\t} else if (this.__frameLength === 127) {\n\n\t\t\t\tthis.__frameLength = 0;\n\t\t\t\tthis.__mode        = 3;\n\n\t\t\t} else {\n\n\t\t\t\t// Protocol Error\n\t\t\t\tthis.__mode      = -1;\n\n\t\t\t}\n\n\n\t\t// Read 16 Bit Frame Length\n\t\t} else if (this.__mode === 2 && bytes >= 2) {\n\n\t\t\tthis.__frameLength  = buffer[this.__offset + 1] + (buffer[this.__offset] << 8);\n\t\t\tthis.__mode         = this.__isMasked === true ? 4 : 5;\n\t\t\tthis.__offset      += 2;\n\n\n\t\t// Read 64 Bit Frame Length\n\t\t} else if (this.__mode === 3 && bytes >= 8) {\n\n\t\t\tvar hi = (buffer[this.__offset + 0] << 24) + (buffer[this.__offset + 1] << 16) + (buffer[this.__offset + 2] <<  8) + buffer[this.__offset + 3];\n\t\t\tvar lo = (buffer[this.__offset + 4] << 24) + (buffer[this.__offset + 5] << 16) + (buffer[this.__offset + 6] <<  8) + buffer[this.__offset + 7];\n\n\n\t\t\tthis.__frameLength  = (hi * 4294967296) + lo;\n\t\t\tthis.__mode         = this.__isMasked === true ? 4 : 5;\n\t\t\tthis.__offset      += 8;\n\n\n\t\t// Read Frame Mask\n\t\t} else if (this.__mode === 4 && bytes >= 4) {\n\n\t\t\tthis.__moffset  = this.__offset;\n\t\t\tthis.__mode     = 5;\n\t\t\tthis.__offset  += 4;\n\n\n\t\t// Read Frame Data\n\t\t} else if (this.__mode === 5 && bytes >= this.__frameLength) {\n\n\t\t\tvar message;\n\t\t\tvar isBinary = this.__op === 2;\n\n\t\t\tif (this.__frameLength > 0) {\n\n\t\t\t\tif (this.__isMasked === true) {\n\n\t\t\t\t\tvar i = 0;\n\t\t\t\t\twhile (i < this.__frameLength) {\n\t\t\t\t\t\tbuffer[this.__offset + i] ^= buffer[this.__moffset + (i % 4)];\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tif (isBinary === true) {\n\t\t\t\t\tmessage = buffer.toString('binary', this.__offset, this.__offset + this.__frameLength);\n\t\t\t\t} else {\n\t\t\t\t\tmessage = buffer.toString('utf8',   this.__offset, this.__offset + this.__frameLength);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tmessage = '';\n\t\t\t}\n\n\n\t\t\tthis.__mode    = 0;\n\t\t\tthis.__offset += this.__frameLength;\n\n\n\t\t\t// Handle Ping Frame & Pong Frame\n\t\t\tif (this.__op === 9 || this.__op === 10) {\n\n\t\t\t\t// Answer the Ping with a Pong\n\t\t\t\tif (this.__op === 9) {\n\t\t\t\t\tthis.write(message, isBinary);\n\t\t\t\t}\n\n\n\t\t\t// Message Frame\n\t\t\t} else {\n\n\t\t\t\tthis.ondata(message, isBinary);\n\n\t\t\t}\n\n\n\t\t\treturn 1;\n\n\t\t} else {\n\n\t\t\treturn -1;\n\n\t\t}\n\n\n\t\tif (this.__mode === -1) {\n\n\t\t\tthis.close(Class.STATUS.protocol_error);\n\n\t\t\treturn -1;\n\n\t\t}\n\n\n\t\treturn 0;\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tvar Class = function(socket) {\n\n\t\tthis.socket  = socket;\n\t\tthis.ondata  = function() {};\n\t\tthis.onclose = function(err) {};\n\n\n\t\tthis.__buffer      = new Buffer(0);\n\t\tthis.__offset      = 0;\n\t\tthis.__moffset     = 0;\n\n\t\tthis.__op          = 0;\n\t\tthis.__mode        = 0;\n\t\tthis.__frameLength = 0;\n\n\t\tthis.__isClosed    = false;\n\t\tthis.__isMasked    = false;\n\n\n\t\tvar that = this;\n\n\t\tthis.socket.on('data', function(data) {\n\t\t\t_read_buffer.call(that, data);\n\t\t});\n\n\t\tthis.socket.on('error', function() {\n\t\t\tthat.close(Class.STATUS.protocol_error);\n\t\t});\n\n\t\tthis.socket.on('timeout', function() {\n\t\t\tthat.close(Class.STATUS.going_away);\n\t\t});\n\n\t\tthis.socket.on('end', function() {\n\t\t\tthat.close(Class.STATUS.normal_closure);\n\t\t});\n\n\t\tthis.socket.on('close', function() {\n\t\t\tthat.close(Class.STATUS.normal_closure);\n\t\t});\n\n\t};\n\n\n\t// Class.FRAMESIZE = 32768; // 32kB\n\tClass.FRAMESIZE = 0x800000; // 8MiB\n\tClass.VERSION   = 13;\n\n\n\tClass.STATUS = {\n\n\t\t// IESG_HYBI\n\t\tnormal_closure:     1000,\n\t\tgoing_away:         1001,\n\t\tprotocol_error:     1002,\n\t\tunsupported_data:   1003,\n\t\tno_status_received: 1005,\n\t\tabnormal_closure:   1006,\n\t\tinvalid_payload:    1007,\n\t\tpolicy_violation:   1008,\n\t\tmessage_too_big:    1009,\n\t\tmissing_extension:  1010,\n\t\tinternal_error:     1011,\n\n\t\t// IESG_HYBI Current\n\t\tservice_restart:    1012,\n\t\tservice_overload:   1013,\n\n\t\t// IESG_HYBI\n\t\ttls_handshake:      1015\n\n\t};\n\n\n\tClass.prototype = {\n\n\t\tsend: function(blob) {\n\n\t\t\tvar result = this.write(blob, false);\n\t\t\tif (result === true) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\n\t\twrite: function(data, isBinary) {\n\n\t\t\tif (this.socket.writable === false) {\n\t\t\t\treturn this.close(Class.STATUS.internal_error);\n\t\t\t}\n\n\n\t\t\tvar enc    = isBinary === true ? 'binary' : 'utf8';\n\t\t\tvar length = Buffer.byteLength(data, enc);\n\t\t\tvar bytes  = 2;\n\n\n\t\t\tvar buffer;\n\n\n\t\t\t// 64 Bit Data Frame\n\t\t\tif (length > 0xffff) {\n\n\t\t\t\tvar lo = length | 0;\n\t\t\t\tvar hi = (length - lo) / 4294967296;\n\n\n\t\t\t\tbuffer = new Buffer(10 + length);\n\t\t\t\tbuffer[1] = 127;\n\n\t\t\t\tbuffer[2] = (hi >> 24) & 0xff;\n\t\t\t\tbuffer[3] = (hi >> 16) & 0xff;\n\t\t\t\tbuffer[4] = (hi >>  8) & 0xff;\n\t\t\t\tbuffer[5] = (hi >>  0) & 0xff;\n\n\t\t\t\tbuffer[6] = (lo >> 24) & 0xff;\n\t\t\t\tbuffer[7] = (lo >> 16) & 0xff;\n\t\t\t\tbuffer[8] = (lo >>  8) & 0xff;\n\t\t\t\tbuffer[9] = (lo >>  0) & 0xff;\n\n\n\t\t\t\tbytes += 8;\n\n\n\t\t\t// 16 Bit Data Frame\n\t\t\t} else if (length > 125) {\n\n\t\t\t\tbuffer = new Buffer(4 + length);\n\t\t\t\tbuffer[1] = 126;\n\n\t\t\t\tbuffer[2] = (length >>  8) & 0xff;\n\t\t\t\tbuffer[3] = (length >>  0) & 0xff;\n\n\n\t\t\t\tbytes += 2;\n\n\n\t\t\t// 8 Bit Data Frame\n\t\t\t} else {\n\n\t\t\t\tbuffer = new Buffer(2 + length);\n\t\t\t\tbuffer[1] = length;\n\n\t\t\t}\n\n\n\t\t\t// Set OP and FIN\n\t\t\tbuffer[0]  = 128 + (isBinary === true ? 2 : 1);\n\t\t\tbuffer[1] &= ~128;\n\n\n\t\t\tbuffer.write(data, bytes, enc);\n\n\n\t\t\treturn this.socket.write(buffer);\n\n\t\t},\n\n\t\tclose: function(status) {\n\n\t\t\tstatus = typeof status === 'number' ? status : Class.STATUS.normal_closure;\n\n\n\t\t\tif (this.__isClosed === false) {\n\n\t\t\t\tvar buffer = new Buffer(4);\n\n\t\t\t\tbuffer[1]  = 2;\n\t\t\t\tbuffer[0]  = 128 + 8;\n\t\t\t\tbuffer[1] &= ~128;\n\n\n\t\t\t\tvar code = String.fromCharCode((status >> 8) & 0xff)\n\t\t\t\t\t\t + String.fromCharCode((status >> 0) & 0xff);\n\n\t\t\t\tbuffer.write(code, 2, 'binary');\n\t\t\t\tbuffer.write('',   4, 'binary');\n\n\n\t\t\t\tthis.socket.write(buffer);\n\t\t\t\tthis.socket.end();\n\t\t\t\tthis.socket.destroy();\n\n\n\t\t\t\tthis.__isClosed = true;\n\t\t\t\tthis.onclose(status);\n\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\n\n\treturn Class;\n\n}"}}},"type":"build","build":"game.net.Server"}});

	if (environment !== null) {

		lychee.setEnvironment(environment);

		lychee.init(function(sandbox) {

			var lychee = sandbox.lychee;
			var game   = sandbox.game;
			var sorbet = sandbox.sorbet;

			// This allows using #MAIN in JSON files
			sandbox.MAIN = new game.net.Server();

			if (typeof sandbox.MAIN.init === 'function') {
				sandbox.MAIN.init();
			}

		});

	}

})(lychee, typeof global !== 'undefined' ? global : this);

